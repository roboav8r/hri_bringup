<?xml version="1.0" ?>
<launch>

  <!-- SENSORS -->
  <!-- Launch the LiDAR -->
  <node name="urg_node_right" pkg="urg_node" type="urg_node" output="screen">
    <param name="ip_address" value=""/>
    <param name="serial_port" value="/dev/ttyACM1"/>
    <param name="serial_baud" value="115200"/>
    <param name="frame_id" value="laser_right"/>
    <param name="calibrate_time" value="true"/>
    <param name="publish_intensity" value="false"/>
    <param name="publish_multiecho" value="false"/>
    <param name="angle_min" value="-1.5707963"/>
    <param name="angle_max" value="1.5707963"/>
  </node>

  <!-- <node name="urg_node_left" pkg="urg_node" type="urg_node" output="screen">
    <param name="ip_address" value=""/>
    <param name="serial_port" value="/dev/ttyACM0"/>
    <param name="serial_baud" value="115200"/>
    <param name="frame_id" value="laser_left"/>
    <param name="calibrate_time" value="true"/>
    <param name="publish_intensity" value="false"/>
    <param name="publish_multiecho" value="false"/>
    <param name="angle_min" value="-1.5707963"/>
    <param name="angle_max" value="1.5707963"/>
  </node> -->

  <!-- DESCRIPTION -->
  <!-- Spawn robot description for visualization -->
  <include file="$(find walrus_description)/launch/walrus_cage.launch" />


  <!-- PROCESSING -->
  <!-- leg_tracker params -->
  <!-- <param name="forest_file" value="$(find leg_tracker)/config/trained_leg_detector_res=0.33.yaml" /> -->
  <param name="forest_file" value="$(find leg_tracker)/config/trained_leg_detector_nrg_1.yaml" />
  <!-- <param name="forest_file" value="$(find leg_tracker)/config/trained_leg_detector_nrg_new.yaml" /> -->
  <param name="scan_topic" value="/scan" />
  <param name="fixed_frame" value="laser_right"/>
  <param name="scan_frequency" value="10"/>   
  <param name="detection_threshold" value="0.75" /> 
  <param name="display_detected_people" value="True" />

  <!-- <rosparam command="load" file="$(find leg_tracker)/config/class_labels.yaml" /> -->
  <rosparam command="load" file="$(find leg_tracker)/config/class_labels.yaml" />
  
  <!-- run detect_leg_clusters -->  
  <node pkg="leg_tracker" type="detect_leg_clusters" name="detect_leg_clusters" output="screen"/>

  <!-- run joint_leg_tracker -->
  <node pkg="leg_tracker" type="joint_leg_tracker.py" name="joint_leg_tracker" output="screen"/>
 
  <!-- run local_occupancy_grid_mapping -->
  <node pkg="leg_tracker" type="local_occupancy_grid_mapping" name="local_occupancy_grid_mapping" output="screen"/> 

  <!-- UTILITIES -->
  <!-- Publish static transform -->
  <node pkg="tf" type="static_transform_publisher" name="map_to_base_link" args="0 0 0.30 0 0 0 /map /base_link 10"/>
  <node pkg="tf" type="static_transform_publisher" name="laserright_to_laser" args="0 0 0 0 0 0 /laser_right /laser 10"/>  

  <!-- Visualize -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find hri_bringup)/rviz/laser_leg_tracking.rviz"/>

  <!-- Leg tracker server node -->
  <node name="leg_tracker_service" pkg="leg_tracker" type="leg_tracker_service" />

  <!-- Robofleet client to send leg messages -->
  <include file="$(find robofleet_client)/launch/client.launch" >
    <arg name="config_file" value="$(find hri_bringup)/config/robofleet_leg_tracker.yaml"/>
  </include>


</launch>

